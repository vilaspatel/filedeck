name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -z "$PREV_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
        else
          COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
        fi
        
        # Create changelog
        echo "## Changes" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "$COMMITS" >> CHANGELOG.md
        
        # Set output for GitHub release
        {
          echo "changelog<<EOF"
          cat CHANGELOG.md
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

  package-helm-chart:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Package Helm chart
      run: |
        mkdir -p helm-packages
        helm package deployment/helm-chart/ -d helm-packages/
        
    - name: Upload Helm chart to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./helm-packages/content-manager-*.tgz
        asset_name: content-manager-helm-chart.tgz
        asset_content_type: application/gzip

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [create-release, package-helm-chart]
    if: always()
    steps:
    - name: Notify Teams/Slack (optional)
      run: |
        echo "Release ${{ github.ref }} completed successfully!"
        # Add your notification logic here (Teams, Slack, etc.)
        # Example:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"Content Manager ${{ github.ref }} has been released!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }} 