# Default values for content-manager
# This is a YAML-formatted file.

# Global settings
global:
  imageRegistry: ""
  storageClass: ""

# Application configuration
app:
  name: content-manager
  version: "1.0.0"
  
# Backend configuration
backend:
  image:
    registry: docker.io
    repository: content-manager/backend
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  replicaCount: 2
  
  ports:
    http: 8000
    metrics: 9090
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  env:
    - name: APP_NAME
      value: "Content Manager"
    - name: LOG_LEVEL
      value: "INFO"
    - name: DEBUG
      value: "false"
    - name: WORKERS
      value: "4"
    - name: HOST
      value: "0.0.0.0"
    - name: PORT
      value: "8000"
    - name: ENABLE_METRICS
      value: "true"
    - name: METRICS_PORT
      value: "9090"
    - name: ENABLE_MULTI_TENANCY
      value: "true"
    - name: DEFAULT_TENANT_ID
      value: "default"
    - name: JWT_ALGORITHM
      value: "HS256"
    - name: JWT_EXPIRE_MINUTES
      value: "30"
    - name: REFRESH_TOKEN_EXPIRE_DAYS
      value: "7"
    - name: MAX_FILE_SIZE
      value: "100"
    - name: CHUNK_SIZE
      value: "8192"
    - name: HEALTH_CHECK_INTERVAL
      value: "30"
  
  # Environment variables from secrets
  secretEnv:
    - name: SECRET_KEY
      secretName: content-manager-secrets
      secretKey: secret-key
    - name: DATABASE_URL
      secretName: content-manager-secrets
      secretKey: database-url
    - name: AZURE_TENANT_ID
      secretName: azure-ad-secrets
      secretKey: tenant-id
    - name: AZURE_CLIENT_ID
      secretName: azure-ad-secrets
      secretKey: client-id
    - name: AZURE_CLIENT_SECRET
      secretName: azure-ad-secrets
      secretKey: client-secret
    - name: AZURE_STORAGE_ACCOUNT_NAME
      secretName: storage-secrets
      secretKey: account-name
    - name: AZURE_STORAGE_ACCOUNT_KEY
      secretName: storage-secrets
      secretKey: account-key
    - name: AZURE_STORAGE_CONTAINER_NAME
      secretName: storage-secrets
      secretKey: container-name

# Frontend configuration
frontend:
  image:
    registry: docker.io
    repository: content-manager/frontend
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  replicaCount: 2
  
  ports:
    http: 3000
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
  
  env:
    - name: REACT_APP_API_BASE_URL
      value: "http://content-manager-backend:8000/api/v1"
    - name: REACT_APP_AZURE_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: azure-ad-secrets
          key: client-id
    - name: REACT_APP_AZURE_AUTHORITY
      valueFrom:
        secretKeyRef:
          name: azure-ad-secrets
          key: authority

# Service configuration
service:
  backend:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    annotations: {}
  
  frontend:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  hosts:
    - host: content-manager.example.com
      paths:
        - path: /api
          pathType: Prefix
          serviceName: content-manager-backend
          servicePort: 8000
        - path: /
          pathType: Prefix
          serviceName: content-manager-frontend
          servicePort: 3000
  
  tls:
    - secretName: content-manager-tls
      hosts:
        - content-manager.example.com

# Database configuration (PostgreSQL)
postgresql:
  enabled: true
  auth:
    postgresPassword: "changeme"
    username: "contentmanager"
    password: "changeme"
    database: "contentmanager"
  
  primary:
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""
    
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi

# Redis configuration (for caching and sessions)
redis:
  enabled: true
  auth:
    enabled: true
    password: "changeme"
  
  master:
    persistence:
      enabled: true
      size: 5Gi
      storageClass: ""
    
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi

# ConfigMaps
configMaps:
  app-config:
    data:
      cors_origins: "http://localhost:3000,https://content-manager.example.com"
      allowed_file_types: "pdf,doc,docx,txt,xml,json,csv,xlsx,png,jpg,jpeg,gif"
      storage_type: "azure"
      database_type: "postgresql"

# Secrets (these should be created separately for security)
secrets:
  content-manager-secrets:
    type: Opaque
    data: {}
      # secret-key: <base64-encoded-secret>
      # database-url: <base64-encoded-db-url>
  
  azure-ad-secrets:
    type: Opaque
    data: {}
      # tenant-id: <base64-encoded-tenant-id>
      # client-id: <base64-encoded-client-id>
      # client-secret: <base64-encoded-client-secret>
      # authority: <base64-encoded-authority>
  
  storage-secrets:
    type: Opaque
    data: {}
      # account-name: <base64-encoded-account-name>
      # account-key: <base64-encoded-account-key>
      # container-name: <base64-encoded-container-name>

# Persistent Volume Claims
persistence:
  uploads:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteMany
    size: 50Gi
    annotations: {}

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Context
podSecurityContext:
  fsGroup: 2000

# Security Context
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: ""
    interval: 30s
    path: /metrics
    labels: {}

# Health checks
healthChecks:
  backend:
    livenessProbe:
      httpGet:
        path: /health/live
        port: 8000
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    
    readinessProbe:
      httpGet:
        path: /health/ready
        port: 8000
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
  
  frontend:
    livenessProbe:
      httpGet:
        path: /
        port: 3000
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    
    readinessProbe:
      httpGet:
        path: /
        port: 3000
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3

# Network Policies
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - namespaceSelector:
            matchLabels:
              name: monitoring
  
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 5432 